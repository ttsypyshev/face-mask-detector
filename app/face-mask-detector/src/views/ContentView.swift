import SwiftUI

//    +-------------------+         +------------------------+         +-----------------------------+
//    |    Камера         |----->---| Обработчик видеопотока |----->---| Детектор масок              |
//    |  (Видеопоток)     |         | (Нормализация, измен.  |         | (Сверточная нейронная сеть, |
//    |                   |         | размера и формат)      |         | Обучение AIZOO)             |
//    +-------------------+         +------------------------+         +-----------------------------+
//                                              |
//                                              v
//                                 +-------------------------+
//                                 |   Пользовательский UI   |
//                                 | (Отображение статуса,   |
//                                 |  Переключение камер)    |
//                                 +-------------------------+
//                                             |
//                                             v
//                               +----------------------------+
//                               |  Статусное уведомление     |
//                               | (Ошибки, отсутств. доступа)|
//                               +----------------------------+
//
//
//
//    +-----------------------------------------------------+
//    |                    Запуск приложения                |
//    | (Запрос разрешений, настройка видеопотока)          |
//    +-----------------------------------------------------+
//                                |
//                                v
//    +-----------------------------------------------------+
//    |                Настройка видеопотока                |
//    | (Инициализация AVCaptureSession, запуск камеры)     |
//    +-----------------------------------------------------+
//                                |
//                                v
//    +-----------------------------------------------------+
//    |                 Предобработка видеопотока           |
//    | (Нормализация размера кадра, подготовка к детекции) |
//    +-----------------------------------------------------+
//                                |
//                                v
//    +-----------------------------------------------------+
//    |                  Детекция маски                     |
//    | (Применение нейронной сети, анализ каждого кадра)   |
//    +-----------------------------------------------------+
//                                |
//                                v
//    +-------------------------------------------------------+
//    |                  Обновление UI                        |
//    | (Вывод статуса распознавания, отображение результатов)|
//    +-------------------------------------------------------+
//                                |
//                                v
//    +-----------------------------------------------------+
//    |                  Переключение камеры                |
//    | (Перезапуск сессии для смены камеры)                |
//    +-----------------------------------------------------+
//                                |
//                                v
//    +-----------------------------------------------------+
//    |                   Завершение работы                 |
//    | (Остановка видеозахвата, завершение работы)         |
//    +-----------------------------------------------------+
//
//
//
//    Input Layer:              (224 x 224 x 3) RGB image
//    ↓
//    MobileNetV2 Backbone:     Pretrained convolutional base (excluding top)
//    ↓
//    Global Average Pooling:   Reduces spatial dimensions
//    ↓
//    Dense Layer:              Fully connected, 512 units, ReLU activation
//    ↓
//    Dropout:                  Rate = 0.5 (to reduce overfitting)
//    ↓
//    Output Layer:             Dense, 2 units, Softmax activation [mask / no_mask]

struct ContentView: View {
    @StateObject private var viewModel = CameraViewModel()

    var body: some View {
        ZStack {
            Group {
                if viewModel.hasAccess {
                    CameraPreviewView(session: viewModel.session)
                } else {
                    CameraAccessDeniedView()
                }
            }
            .overlay(
                CameraControlsView(
                    switchCameraAction: { viewModel.switchCamera() },
                    detectionStatus: viewModel.detectionStatus
                )
            )
        }
        .ignoresSafeArea()
        .onAppear { viewModel.configure() }
        .onDisappear { viewModel.stopSession() }
    }
}
